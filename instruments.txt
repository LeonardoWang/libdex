Op  Mnemonic                 Format                  Syntax
00  nop                      op00
01  move                     opBA                    vA, vB
02  move/from16              opAABBBB                vA, vB
03  move/16                  op00AAAABBBB            vA, vB
04  move_wide                opBA                    vA, vB
05  move_wide/from16         opAABBBB                vA, vB
06  move_wide/16             op00AAAABBBB            vA, vB
07  move_object              opBA                    vA, vB
08  move_object/from16       opAABBBB                vA, vB
09  move_object/16           op00AAAABBBB            vA, vB
0a  move_result              opAA                    vA
0b  move_result_wide         opAA                    vA
0c  move_result_object       opAA                    vA
0d  move_exception           opAA                    vA
0e  return_void              op00
0f  return                   opAA                    vA
10  return_wide              opAA                    VA
11  return_object            opAA                    vA
12  const/4                  opBA                    vA, #+B
13  const/16                 opAABBBB                vA, #+B
14  const                    opAABBBBBBBB            vA, #+B
15  const/high16             opAABBBB                vA, #+B0000
16  const_wide/16            opAABBBB                vA, #+B
17  const_wide/32            opAABBBBBBBB            vA, #+B
18  const_wide               opAABBBBBBBBBBBBBBBB    vA, #+B
19  const_wide/high16        opAABBBB                vA, #+B000000000000
1a  const_string             opAABBBB                vA, string@B
1b  const_string/jumbo       opAABBBBBBBB            vA, string@B
1c  const_class              opAABBBB                vA, type@B
1d  monitor_enter            opAA                    vA
1e  monitor_exit             opAA                    vA
1f  check_cast               opAABBBB                vA, type@B
20  instance_of              opBACCCC                vA, vB, type@C
21  array_length             opBA                    vA, vB
22  new_instance             opAABBBB                vA, type@B
23  new_array                opBACCCC                vA, vB, type@C
24  filled_new_array         opAGBBBBDCFE            {vC, vD, vE, vF, vG}, type@B
25  filled_new_array/range   opAABBBBCCCC            {vC .. vN}, type@B
26  fill_array_data          opAABBBBBBBB            {vA, +B}
27  throw                    opAA                    vA
28  goto                     opAA                    +A
29  goto/16                  op00AAAA                +A
2a  goto/32                  op00AAAAAAAA            +A
2b  packed_switch            opAABBBBBBBB            vA, +B
2c  sparse_switch            opAABBBBBBBB            vA, +B
2d  cmpl_float               opAACCBB                vA, vB, vC
2e  cmpg_float               opAACCBB                vA, vB, vC
2f  cmpl_double              opAACCBB                vA, vB, vC
30  cmpg_double              opAACCBB                vA, vB, vC
31  cmp_long                 opAACCBB                vA, vB, vC
32  if_eq                    opBACCCC                vA, vB, +C
33  if_ne                    opBACCCC                vA, vB, +C
34  if_lt                    opBACCCC                vA, vB, +C
35  if_ge                    opBACCCC                vA, vB, +C
36  if_gt                    opBACCCC                vA, vB, +C
37  if_le                    opBACCCC                vA, vB, +C
38  if_eqz                   opAABBBB                vA, +B
39  if_nez                   opAABBBB                vA, +B
3a  if_ltz                   opAABBBB                vA, +B
3b  if_gez                   opAABBBB                vA, +B
3c  if_gtz                   opAABBBB                vA, +B
3d  if_lez                   opAABBBB                vA, +B
3e  UNUSED                   op00
3f  UNUSED                   op00
40  UNUSED                   op00
41  UNUSED                   op00
42  UNUSED                   op00
43  UNUSED                   op00
44  aget                     opAACCBB                vA, vB, vC
45  aget_wide                opAACCBB                vA, vB, vC
46  aget_object              opAACCBB                vA, vB, vC
47  aget_boolean             opAACCBB                vA, vB, vC
48  aget_byte                opAACCBB                vA, vB, vC
49  aget_char                opAACCBB                vA, vB, vC
4a  aget_short               opAACCBB                vA, vB, vC
4b  aput                     opAACCBB                vA, vB, vC
4c  aput_wide                opAACCBB                vA, vB, vC
4d  aput_object              opAACCBB                vA, vB, vC
4e  aput_boolean             opAACCBB                vA, vB, vC
4f  aput_byte                opAACCBB                vA, vB, vC
50  aput_char                opAACCBB                vA, vB, vC
51  aput_short               opAACCBB                vA, vB, vC
52  iget                     opBACCCC                vA, vB, field@C
53  iget_wide                opBACCCC                vA, vB, field@C
54  iget_object              opBACCCC                vA, vB, field@C
55  iget_boolean             opBACCCC                vA, vB, field@C
56  iget_byte                opBACCCC                vA, vB, field@C
57  iget_char                opBACCCC                vA, vB, field@C
58  iget_short               opBACCCC                vA, vB, field@C
59  iput                     opBACCCC                vA, vB, field@C
5a  iput_wide                opBACCCC                vA, vB, field@C
5b  iput_object              opBACCCC                vA, vB, field@C
5c  iput_boolean             opBACCCC                vA, vB, field@C
5d  iput_byte                opBACCCC                vA, vB, field@C
5e  iput_char                opBACCCC                vA, vB, field@C
5f  iput_short               opBACCCC                vA, vB, field@C
60  sget                     opAABBBB                vA, field@B
61  sget_wide                opAABBBB                vA, field@B
62  sget_object              opAABBBB                vA, field@B
63  sget_boolean             opAABBBB                vA, field@B
64  sget_byte                opAABBBB                vA, field@B
65  sget_char                opAABBBB                vA, field@B
66  sget_short               opAABBBB                vA, field@B
67  sput                     opAABBBB                vA, field@B
68  sput_wide                opAABBBB                vA, field@B
69  sput_object              opAABBBB                vA, field@B
6a  sput_boolean             opAABBBB                vA, field@B
6b  sput_byte                opAABBBB                vA, field@B
6c  sput_char                opAABBBB                vA, field@B
6d  sput_short               opAABBBB                vA, field@B
6e  invoke_virtual           opAGBBBBDCFE            {vC, vD, vE, vF, vG}, meth@B
6f  invoke_super             opAGBBBBDCFE            {vC, vD, vE, vF, vG}, meth@B
70  invoke_direct            opAGBBBBDCFE            {vC, vD, vE, vF, vG}, meth@B
71  invoke_static            opAGBBBBDCFE            {vC, vD, vE, vF, vG}, meth@B
72  invoke_interface         opAGBBBBDCFE            {vC, vD, vE, vF, vG}, meth@B
73  UNUSED                   op00
74  invoke_virtual/range     opAABBBBCCCC            {vC .. vN}, meth@B
75  invoke_super/range       opAABBBBCCCC            {vC .. vN}, meth@B
76  invoke_direct/range      opAABBBBCCCC            {vC .. vN}, meth@B
77  invoke_static/range      opAABBBBCCCC            {vC .. vN}, meth@B
78  invoke_interface/range   opAABBBBCCCC            {vC .. vN}, meth@B
79  UNUSED                   op00
7a  UNUSED                   op00
7b  neg_int                  opBA                    vA, vB
7c  not_int                  opBA                    vA, vB
7d  neg_long                 opBA                    vA, vB
7e  not_long                 opBA                    vA, vB
7f  neg_float                opBA                    vA, vB
80  neg_double               opBA                    vA, vB
81  int_to_long              opBA                    vA, vB
82  int_to_float             opBA                    vA, vB
83  int_to_double            opBA                    vA, vB
84  long_to_int              opBA                    vA, vB
85  long_to_float            opBA                    vA, vB
86  long_to_double           opBA                    vA, vB
87  float_to_int             opBA                    vA, vB
88  float_to_long            opBA                    vA, vB
89  float_to_double          opBA                    vA, vB
8a  double_to_int            opBA                    vA, vB
8b  double_to_long           opBA                    vA, vB
8c  double_to_float          opBA                    vA, vB
8d  int_to_byte              opBA                    vA, vB
8e  int_to_char              opBA                    vA, vB
8f  int_to_short             opBA                    vA, vB
90  add_int                  opAACCBB                vA, vB, vC
91  sub_int                  opAACCBB                vA, vB, vC
92  mul_int                  opAACCBB                vA, vB, vC
93  div_int                  opAACCBB                vA, vB, vC
94  rem_int                  opAACCBB                vA, vB, vC
95  and_int                  opAACCBB                vA, vB, vC
96  or_int                   opAACCBB                vA, vB, vC
97  xor_int                  opAACCBB                vA, vB, vC
98  shl_int                  opAACCBB                vA, vB, vC
99  shr_int                  opAACCBB                vA, vB, vC
9a  ushr_int                 opAACCBB                vA, vB, vC
9b  add_long                 opAACCBB                vA, vB, vC
9c  sub_long                 opAACCBB                vA, vB, vC
9d  mul_long                 opAACCBB                vA, vB, vC
9e  div_long                 opAACCBB                vA, vB, vC
9f  rem_long                 opAACCBB                vA, vB, vC
a0  and_long                 opAACCBB                vA, vB, vC
a1  or_long                  opAACCBB                vA, vB, vC
a2  xor_long                 opAACCBB                vA, vB, vC
a3  shl_long                 opAACCBB                vA, vB, vC
a4  shr_long                 opAACCBB                vA, vB, vC
a5  ushr_long                opAACCBB                vA, vB, vC
a6  add_float                opAACCBB                vA, vB, vC
a7  sub_float                opAACCBB                vA, vB, vC
a8  mul_float                opAACCBB                vA, vB, vC
a9  div_float                opAACCBB                vA, vB, vC
aa  rem_float                opAACCBB                vA, vB, vC
ab  add_double               opAACCBB                vA, vB, vC
ac  sub_double               opAACCBB                vA, vB, vC
ad  mul_double               opAACCBB                vA, vB, vC
ae  div_double               opAACCBB                vA, vB, vC
af  rem_double               opAACCBB                vA, vB, vC
b0  add_int/2addr            opBA                    vA, vB
b1  sub_int/2addr            opBA                    vA, vB
b2  mul_int/2addr            opBA                    vA, vB
b3  div_int/2addr            opBA                    vA, vB
b4  rem_int/2addr            opBA                    vA, vB
b5  and_int/2addr            opBA                    vA, vB
b6  or_int/2addr             opBA                    vA, vB
b7  xor_int/2addr            opBA                    vA, vB
b8  shl_int/2addr            opBA                    vA, vB
b9  shr_int/2addr            opBA                    vA, vB
ba  ushr_int/2addr           opBA                    vA, vB
bb  add_long/2addr           opBA                    vA, vB
bc  sub_long/2addr           opBA                    vA, vB
bd  mul_long/2addr           opBA                    vA, vB
be  div_long/2addr           opBA                    vA, vB
bf  rem_long/2addr           opBA                    vA, vB
c0  and_long/2addr           opBA                    vA, vB
c1  or_long/2addr            opBA                    vA, vB
c2  xor_long/2addr           opBA                    vA, vB
c3  shl_long/2addr           opBA                    vA, vB
c4  shr_long/2addr           opBA                    vA, vB
c5  ushr_long/2addr          opBA                    vA, vB
c6  add_float/2addr          opBA                    vA, vB
c7  sub_float/2addr          opBA                    vA, vB
c8  mul_float/2addr          opBA                    vA, vB
c9  div_float/2addr          opBA                    vA, vB
ca  rem_float/2addr          opBA                    vA, vB
cb  add_double/2addr         opBA                    vA, vB
cc  sub_double/2addr         opBA                    vA, vB
cd  mul_double/2addr         opBA                    vA, vB
ce  div_double/2addr         opBA                    vA, vB
cf  rem_double/2addr         opBA                    vA, vB
d0  add_int/lit16            opBACCCC                vA, vB, #+CCCC
d1  rsub_int                 opBACCCC                vA, vB, #+CCCC
d2  mul_int/lit16            opBACCCC                vA, vB, #+CCCC
d3  div_int/lit16            opBACCCC                vA, vB, #+CCCC
d4  rem_int/lit16            opBACCCC                vA, vB, #+CCCC
d5  and_int/lit16            opBACCCC                vA, vB, #+CCCC
d6  or_int/lit16             opBACCCC                vA, vB, #+CCCC
d7  xor_int/lit16            opBACCCC                vA, vB, #+CCCC
d8  add_int/lit8             opAACCBB                vA, vB, #+CCCC
d9  rsub_int/lit8            opAACCBB                vA, vB, #+CCCC
da  mul_int/lit8             opAACCBB                vA, vB, #+CCCC
db  div_int/lit8             opAACCBB                vA, vB, #+CCCC
dc  rem_int/lit8             opAACCBB                vA, vB, #+CCCC
dd  and_int/lit8             opAACCBB                vA, vB, #+CCCC
de  or_int/lit8              opAACCBB                vA, vB, #+CCCC
df  xor_int/lit8             opAACCBB                vA, vB, #+CCCC
e0  shl_int/lit8             opAACCBB                vA, vB, #+CCCC
e1  shr_int/lit8             opAACCBB                vA, vB, #+CCCC
e2  ushr_int/lit8            opAACCBB                vA, vB, #+CCCC
e3  UNUSED                   op00
e4  UNUSED                   op00
e5  UNUSED                   op00
e6  UNUSED                   op00
e7  UNUSED                   op00
e8  UNUSED                   op00
e9  UNUSED                   op00
ea  UNUSED                   op00
eb  UNUSED                   op00
ec  UNUSED                   op00
ed  UNUSED                   op00
ee  UNUSED                   op00
ef  UNUSED                   op00
f0  UNUSED                   op00
f1  UNUSED                   op00
f2  UNUSED                   op00
f3  UNUSED                   op00
f4  UNUSED                   op00
f5  UNUSED                   op00
f6  UNUSED                   op00
f7  UNUSED                   op00
f8  UNUSED                   op00
f9  UNUSED                   op00
fa  invoke_polymorphic       opAGBBBBDCFEHHHH    {vC, vD, vE, vF, vG}, meth@B, proto@H
fb  invoke_polymorphic/range opAABBBBCCCCHHHH    {vC .. vN}, meth@B, proto@H
fc  invoke_custom            opAGBBBBDCFE        {vC, vD, vE, vF, vG}, call_site@B
fd  invoke_custom/range      opAABBBBCCCC        {vC .. vN}, call_site@B
fe  UNUSED                   op00
ff  UNUSED                   op00
